// 杂记json文件
window.$$note = [{
    title: '一周感悟',
    text: `这一周从周一下午出去出差,周五晚上10点多到家。在这一周和房工学到了很多东西,也有发现了自己的很多问题，
      静不下心里，学习新东西很吃力，感觉自己很浮躁，今天我要好好想一想自己的目标到底是什么，敲代码这个职业是否是真的
      适合我自己的，还有就是一定要把长久的目标和自己的短期的目标定下来，这样才有动力，才有方向，而不是一个劲的闷着头往前冲
      今天去钱塘江转了一大圈，朋友xxx在研究基金，我也想着在咸鱼上找一些副业，目前就是准备等毕业答辩结束之后在咸鱼上接一些个人的项目，
      还有就是准备把最近每周拍好最近两周的日程计划
    `
  },
  {
    title: '上班第一次出差',
    text: '今天突然接到通知要去宿迁那边出差，下午老早就坐不住了，然后下午坐了差不多4个小时的高铁，到晚上11点多才到这边住的地方(新世纪花园)，路上和房哥聊了很多学习方面的东西，也很受益'
  },
  {
    title: '上班的第一个双休',
    text: `首先说一下这个双休是多么的难能可贵，本来应该是全体都加班的，然后由于我和X工说我约好了好朋友XXX出去玩，还有一个原因就是我不是
    社区盒子开发成员之一。周六睡了个懒觉，早上9点左右起床，玩了会儿手机，然后把屋子简单收拾了一下，就出发去朋友XXX那边了，到那边之后本来和
    XXX说好要去他公司那边玩，然后，去吃公司旁边的烩面（哎:)，好久没吃烩面了阿!!!),然后由于我自己的原因(坐了一个多小时的地铁，又走了很久，感觉很累)
    然后就没有去XXX那边，然后先去他住的地方了，然后点了份外面，玩了会电脑，到下午4点多了，然后去朋友那边剪头发，那边剪头发才15块钱，我这边剪头发要48块钱
    15的那个是速剪这边的服务肯定会比那边好，然后剪完头，还买了很多菜，晚上吃饭前，还去西湖那(龙翔桥)进了苹果旗舰店，真的真的真的太棒了------`
  },
  {
    title: '自知不足,尚在努力',
    text: `上周日的时候在地铁上看到一个一直关注的一个故事板UP主--(米雷-RayDog)发布的一个关于自己追星的视频,
          我也在问自己,自己每天把一半的时间用在敲代码上是否值得,是因为真正的热爱还是因为程序员的工资高,工作环境好？
          自省一下，发现自己喜欢的东西也不多,音乐(钢琴,吉他,大提琴),电脑(视频剪辑,vsCode,Note,MarkDown,Git),还有一些其他的东西
          我有时只是真正的想要了解,现在感觉自己就是一直无脑的在学习前端方面的东西,没有规划,没有目标,有时我也在想,三年后我在干嘛,
          还是在这边复制粘贴代码,每天搞一些无意义的事情吗,我真的喜欢编程吗,我真的深入了解过编程的价值吗,3.1号面试的时候和fms聊了很多
          也让我又重新拾起记账这一习惯，坚持下去，希望早日真正找到编程带给我的成就感。I code and I'm very lucky to get parid for it:)
    `,
    // imglist:[
    //   {imgurl:require('./img/code_maxnumber.png')}
    // ]
  },
  {
    title: 'Calm down and sink in',
    text: `记账软件`,
    imglist: [{
      imgurl: './img/code_maxnumber.png'
    }]
  },
  {
    title: '25号底片',
    text: `To see the world<br>
     things dangerous to come to <br>
     To see behind walls ,To draw closer <br>
     To find each other and to feel <br>
     That is the purpose of LIFE <br>
     开拓视野，冲破艰险<br>
     洞悉所有，贴近生活<br>
     寻找真爱，感受彼此<br>
     这就是人生的目的 `,
    imglist: [{
        imgurl: './img/brmxj1.jpeg'
      },
      {
        imgurl: './img/brmxj2.jpeg'
      },
      {
        imgurl: './img/Number25.jpg'
      }
    ]
  },
  {
    title: '西湖-痛仰乐队',
    text: `前天听朋友放了一首痛仰乐队的歌，名字叫《西湖》，非常好听，特别特别特别喜欢这首歌的前21秒,
    之前在学校参加活动的时候，我们班一个同学和他的小乐队表演过痛仰的再见杰克`,
    imglist: [{
      imgurl: "./img/ty_xh.jpg"
    }]
  },
  {
    title: '人间-王菲',
    text: `风雨过後不一定有美好的天空<br>
          不是天晴就会有彩虹<br>
          所以你一脸无辜不代表你懵懂<br>
          不是所有感情都会有始有终<br>
          孤独尽头不一定惶恐<br>
          可生命总免不了最初的一阵痛<br>
          但愿你的眼睛只看得到笑容<br>
          但愿你流下每一滴泪都让人感动<br>
          但愿你以後每一个梦不会一场空<br>
          天上人间如果真值得歌颂<br>
          也是因为有你才会变得闹哄哄<br>
          天大地大世界比你想像中朦胧<br>
          我不忍心再欺哄但愿你听得懂`,
    imglist: [{
      imgurl: "./img/renjian.jpeg"
    }],
  },
  {
    title: "雨雾下的西湖",
    text: "时隔3年，再次来到西湖，西湖依然那么美伦美奂。去时正是下雨天，给西湖的美更是蒙上一层朦胧面纱，山上云雾飞起，水中鸳鸯更是增加了几分美丽",
    imglist: [{
        imgurl: "./img/xh3.jpg"
      },
      {
        imgurl: "./img/xh2.jpg"
      },
      {
        imgurl: "./img/xh1.jpg"
      },
    ],
    srcList: [
      'https://fuss10.elemecdn.com/8/27/f01c15bb73e1ef3793e64e6b7bbccjpeg.jpeg',
      'https://fuss10.elemecdn.com/1/8e/aeffeb4de74e2fde4bd74fc7b4486jpeg.jpeg'
    ],
  },
  {
    title: "菲兹杰拉德",
    text: "我们来自远方，我们的梦想却那么近，看起来想不实现都难，然而我们并不知道，梦早已破碎。 我们继续奋力向前，逆水行舟，被不断地向后推，直至回到往昔岁月",
    imglist: [{
      imgurl: './img/gasby.jpg'
    }]
  },
  {
    title: "王小波",
    text: "一个人倘若需要从思想中得到快乐,那么他的第一个欲望就是学习   ——王小波",
    imglist: [{
      imgurl: "./img/wxb.jpg"
    }],
  },
  {
    title: "别做那只迷途的候鸟",
    text: `其实，很长一段时间，我也觉得自己是求职候鸟群中的一只候鸟，努力让自己跟得上迁徙的时刻，一刻不停地往前飞，在人群之中才有安全感，可一个人回到家，又忍不住问自己：现在的工作与生活真的是自己想要的吗？
我常问自己这个问题，我害怕自己看起来是避寒候鸟中的一只，实际上我早已迷途。
我脑子里总有一个画面：一只鸟不知疲倦地飞着，以为前方有鸟群等着自己，以为前方就是南方，但某个闪失时早已迷途。`,
  },
  {
    title: "放学后",
    text: "那些青春期的脆弱自尊，轻易不得触碰，那极有有可能成为对他或她一生的打扰。我们都曾经历那样纯粹、易碎的青春，只是时光的磨砺已让我们懂得逃避与忍气吞声然后慢慢遗忘自己曾经的青春",
  },
  {
    title: "秘密",
    text: "我们每个人，最想要的就是爱与自由，对于我爱的人，我们愿意付出全部的爱和热情，这种爱本可持续，但热情总会熄灭，这时追求自由，变成我们官黄堂冕的借口，这是人类的全部价值，早已有爱，变成了一颗永远追求自由的心，自由成了背叛的理由，爱情，忘了它吧",
  },
];

// 学习笔记json文件
window.$$learn_note = [{
    title: 'vue数据双向绑定',
    context: `vue实现数据双向绑定主要是：采用数据劫持结合发布者-订阅者模式的方式，通过 Object.defineProperty() 来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应监听回调。当把一个普通 Javascript 对象传给 Vue 实例来作为它的 data 选项时，Vue 将遍历它的属性，用 Object.defineProperty() 将它们转为 getter/setter。用户看不到 getter/setter，但是在内部它们让 Vue 追踪依赖，在属性被访问和修改时通知变化。
vue的数据双向绑定 将MVVM作为数据绑定的入口，整合Observer，Compile和Watcher三者，通过Observer来监听自己的model的数据变化，通过Compile来解析编译模板指令（vue中是用来解析 {{}}），最终利用watcher搭起observer和Compile之间的通信桥梁，达到数据变化 —>视图更新；视图交互变化（input）—>数据model变更双向绑定效果
`
  },
  {
    title: "Keep-alive",
    context: `主要用于保留组件状态或避免重新渲染.有一个列表页面和一个 详情页面，那么用户就会经常执行打开详情=>返回列表=>打开详情这样的话 列表 和 详情 都是一个频率很高的页面，那么就可以对列表组件使用keep-alive进行缓存，这样用户每次返回列表的时候，都能从缓存中快速渲染，而不是重新渲染。
1、属性：
include:字符串或正则表达式。只有匹配的组件会被缓存。
exclude：字符串或正则表达式。任何匹配的组件都不会被缓存。
2、用法：
包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。和 <transition>相似，<keep-alive>是一个抽象组件：它自身不会渲染一DOM 元素，也不会出现在父组件链中。
当组件在keep-alive 内被切换，在 2.2.0 及其更高版本中，activated 和 deactivated生命周期 将会在 树内的所有嵌套组件中触发`

  },
  {
    title: 'v-for和v-if的优先级',
    context: '当它们处于同一节点，v-for的优先级比v-if更高，这意味着 v-if将分别重复运行于每个 v-for循环中。当你想为仅有的一些项渲染节点时，这种优先级的机制会十分有用'
  },
  {
    title: 'vuex理解',
    context: 'vuex是一个状态管理工具，主要解决大中型复杂项目的数据共享问题，主要包括state,actions,mutations,getters和modules 5个要素，主要流程：组件通过dispatch到 actions，actions是异步操作，再actions中通过commit到mutations，mutations再通过逻辑操作改变state，从而同步到组件，更新其数据状态,而getters相当于组件的计算属性对,组件中获取到的数据做提前处理的.再说到辅助函数的作用'
  },
  {
    title: 'v-if和v-show的区别',
    context: `v-if和v-show都可以显示和隐藏一个元素，但有本质区别
v-if是惰性的，只是值为false就不会加载对应元素，为true才动态加载对应元素
v-show:是无论为true和为false都会加载对应html代码，但为false时用display:none隐藏不在页面显示，但为true时页面上用display:block显示其效果

适用场景：切换频繁的场合用v-show,切换不频繁的场合用v-if`
  },
  {
    title: '事件委托',
    context: 'JS事件代理就是通过给父级元素（例如：ul）绑定事件，不给子级元素(例如：li)绑定事件，然后当点击子级元素时，通过事件冒泡机制在其绑定的父元素上触发事件处理函数，主要目的是为了提升性能，因为我不用给每个子级元素绑定事件，只给父级元素绑定一次就好了,在原生js里面是通过event对象的targe属性实现'
  },
  {
    title: "请求拦截器",
    context: ` 请求拦截器的作用是在请求发送前进行一些操作，例如在每个请求体里加上token，统一做了处理如果以后要改也非常容易。
    关于拦截，这里只说原理，前端的请求，最终还是离不开 ajax，像vue 的
    vue-resource
    、axios，都只是对ajax进行了统一的封装，它暴露出来的拦截器，其实就是写了一个方法，把ajax写在这个方法里面，在执行这个方法的时候，先将请求时要添加给请求头的那些数据（token、后端要的加密码…具体要看实际情况）先执行一遍，都赋值给一个变量，然后再统一传给ajax，接下来就是执行ajax，这就是所谓的请求拦截，其实就是先执行要添加的数据，然后再执行ajax，如果把这个添加数据的过程抽出来，就成了所谓的请求拦截器；`
  },
  {
    title: '响应拦截器',
    context: ` 响应拦截器的作用是在接收到响应后进行一些操作，例如在服务器返回登录状态失效，需要重新登录的时候，跳转到登录页。
    响应拦截器也是一样如此，就是在请求结果返回后，先不直接导出，而是先对响应码等等进行处理，处理好后再导出给页面，如果将这个对响应码的处理过程抽出来，就成了所谓的响应拦截器；`
  },
  {
    title: "vue中css样式穿透",
    context: `从官方文档了解到，我们所谓的穿透，官方叫做深度选择器。就是在我们想穿透的选择器前边添加 >>> 或者 /deep/ 或者 ::v-deep
    官方说明>>>可能存在问题，建议用后两者，我们用的less，就选择 /deep/ 好了，于是我们加回刚在style中删除的scoped属性，`,
  },
  {
    title: "document.querySelectorAll赋给其它变量时, 为什么要.bind(document)?",
    context: `因为document.querySelectorAll是通过document这个对象去调用querySelectorAll的时候，
              函数的环境变量里this会指向document，假设querySelectorAll含有this的操作的话，那么this就会指代document。  
              而当你执行var select = document.querySelectorAll; 的时候，select所得到的是querySelector这个引用，
              但是此时如果直接通过select去调用的话，也就是select('span'); ，由于select（querySelectorAll）直接调用的话，
              this会自动指向window，所以就会出错。bind的作用是，创建一个新函数，称为绑定函数。当调用这个绑定函数时，绑定函数会以创建它时传入 bind()方法的第一个参数作为 this，传入 bind() 方法的第二个以及以后的参数。  
              而这句话var $ = document.querySelectorAll.bind(document);的效果相当于下面的代码`,
  },
  {
    title: "MVVM的理解",
    context: `MVVM是Model-View-ViewModel的缩写。MVVM是一种设计思想。
View层是视图层，也就是用户界面。前端主要由HTML和CSS来构建；
Model层 是指数据模型，泛指后端进行的各种业务逻辑处理和数据操控，对于前端来说就是后端的提供的API接口；
ViewModel层是视图数据层，一个同步View和Model的对象。

在MVVM架构下，View和Model之间并没有直接的联系，而是通过ViewModel进行交互，Model和ViewModel之间的交互是双向的，因此View数据的变化会同步到Model中，而Model数据的变化也会立即反应到View上。

ViewModel通过双向数据绑定把View层和Model层连接了起来，而View和Model之间的同步工作完全是自动的，无需人为干涉，因此开发者只需要关注业务逻辑，不需要手动操作DOM，不需要关注数据状态的同步问题，复杂的数据状态维护完全由MVVM来统一管理`,
  },
  {
    title: 'computed 有何特点，computed 和 watch，methods 的区别',
    context: `computed： 有缓存，data 不变不会重新计算；提高性能。
computed 为什么需要缓存？简单说就是可以提高性能。假设我们有一个性能开销比较大的计算属性A,它需要遍历一个巨大的数组做大量的计算，然后我们可能有其他的属性依赖于A，如果没有缓存，将不可避免的多次执行A 的getter，如果不希望有缓存请用方法代替
computed 和 methods的区别: computed 计算属性是基于它的响应式依赖进行缓存的，只在相关响应式依赖发生改变时它们才会重新求值，这意味着只要原属性还没发生改变，多次访问相关属性，计算属性会立即返回之前的计算结果，而不必再次执行函数；而 methods 每当触发重新渲染时，调用方法总会再次执行函数
computed 和 watch的区别：computed 默认只要 getter，不过需要时也可以提供 setter；watch 侦听器，当需要在数据变化时执行异步或开销较大的操作时，watch是最有用的，使用 watch选项允许执行异步操作（访问一个API）,限制我们执行该操作的频率，并在得到最终结果前，设置中间状态，这些都是计算属性无法做到的`
  }
];